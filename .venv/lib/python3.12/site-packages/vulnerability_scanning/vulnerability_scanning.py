import socket
import requests

def scan_open_ports(ip_address, start_port=1, end_port=65535):
    """
    Scans the specified IP address for open ports within the given range.

    Args:
        ip_address (str): The IP address to scan.
        start_port (int, optional): The starting port number. Defaults to 1.
        end_port (int, optional): The ending port number. Defaults to 65535.

    Returns:
        list: A list of open ports.
    """
    open_ports = []
    for port in range(start_port, end_port + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        result = sock.connect_ex((ip_address, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    return open_ports

def check_upnp_vulnerability(router_ip):
    """
    Checks if the router has UPnP enabled and vulnerable.

    Args:
        router_ip (str): The IP address of the router.

    Returns:
        str: A message indicating whether UPnP is enabled and vulnerable.
    """
    try:
        upnp_url = f"http://{router_ip}:1900"
        response = requests.get(upnp_url)
        if response.status_code == 200:
            return "UPnP is enabled and may be vulnerable."
        return "UPnP is not enabled."
    except requests.ConnectionError:
        return "UPnP service is not accessible."

def check_nat_pmp_vulnerability(router_ip):
    """
    Checks if the router has NAT-PMP enabled and vulnerable.

    Args:
        router_ip (str): The IP address of the router.

    Returns:
        str: A message indicating whether NAT-PMP is enabled and vulnerable.
    """
    try:
        nat_pmp_url = f"http://{router_ip}:5351"
        response = requests.get(nat_pmp_url)
        if response.status_code == 200:
            return "NAT-PMP is enabled and may be vulnerable."
        return "NAT-PMP is not enabled."
    except requests.ConnectionError:
        return "NAT-PMP service is not accessible."

def check_common_exploits(router_ip):
    """
    Checks the router for common vulnerabilities and exploits.

    Args:
        router_ip (str): The IP address of the router.

    Returns:
        dict: A dictionary containing the status of various common vulnerability checks.
    """
    vulnerabilities = {
        "UPnP": check_upnp_vulnerability(router_ip),
        "NAT-PMP": check_nat_pmp_vulnerability(router_ip),
        "Open Ports": scan_open_ports(router_ip, start_port=1, end_port=1024),  # Scan common ports
    }

    return vulnerabilities
